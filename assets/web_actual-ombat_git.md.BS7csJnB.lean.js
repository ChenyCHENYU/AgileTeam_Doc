/**
 * name: agile-team-doc
 * version: v2.1.0
 * description: 敏捷团队构建的线上文档，希望同时帮助到团队伙伴和社区的大家
 * author: CHENY <ycyplus@gmail.com>
 * homepage: https://github.com/ChenyCHENYU/AgileTeam_Doc
 */
import{_ as p,C as h,c as d,o,aQ as l,G as a,j as s,w as k,a as t}from"./chunks/framework.BjhQmtN6.js";const m=JSON.parse('{"title":"Git 的使用","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"web/actual-ombat/git.md","filePath":"web/actual-ombat/git.md","lastUpdated":1732265191000}'),r={name:"web/actual-ombat/git.md"};function c(g,i,F,u,b,y){const n=h("ElCard"),e=h("ElImg");return o(),d("div",null,[i[1]||(i[1]=l('<h1 id="git-的使用" tabindex="-1">Git 的使用 <a class="header-anchor" href="#git-的使用" aria-label="Permalink to &quot;Git 的使用&quot;">​</a></h1><blockquote><p>Git (读音为 /gɪt/) 是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理，Git 也是目前最先进的分布式版本控制系统。</p></blockquote><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><p>先理解下 <code>Git</code> <strong>工作区</strong>、<strong>暂存区</strong> 和 <strong>版本库</strong> 的概念。</p>',4)),a(n,{shadow:"hover"},{default:k(()=>i[0]||(i[0]=[s("p",null,[t("- "),s("strong",null,"工作区"),t("：简单理解就是电脑里能看到和存放项的目录。"),s("br"),t(" - "),s("strong",null,"暂存区"),t("：这里指 "),s("code",null,"index"),t("，一般存放在 "),s("code",null,".git"),t(" 目录下的 "),s("code",null,"index"),t(" 文件（"),s("code",null,".git/index"),t("）中，所以我们把暂存区有时也叫作索引。"),s("br"),t(" - "),s("strong",null,"版本库"),t("：工作区有一个隐藏目录 "),s("code",null,".git"),t("，这个不算工作区，而是 "),s("strong",null,"Git"),t(" 的版本库。")],-1)])),_:1,__:[0]}),i[2]||(i[2]=s("p",null,"下图很直观的展示了工作区、版本库中的暂存区和版本库之间的关系。",-1)),a(e,{src:"img/git.jpg",title:"Git 工作区、暂存区、版本库之间的关系"}),i[3]||(i[3]=l('<ul><li><p>图左侧为工作区，右侧为版本库。在版本库中标记为 <strong>index</strong> 的区域是暂存，标记为 <strong>master</strong> 的是 <strong>master</strong> 分支所代表的目录树。</p></li><li><p>图右 <strong>HEAD</strong> 实际是指向 <strong>master</strong> 分支的一个 &quot;游标&quot;，所以图示的命令中出现 <strong>HEAD</strong> 的地方可以用 <strong>master</strong> 来替换。</p></li><li><p>图右下方的 <strong>objects</strong> 标识的区域为 <strong>Git</strong> 的对象库，实际位于 <code>.git/objects</code> 目录下，里面包含了创建的各种对象及内容。</p></li></ul><h2 id="git-的安装和配置" tabindex="-1">Git 的安装和配置 <a class="header-anchor" href="#git-的安装和配置" aria-label="Permalink to &quot;Git 的安装和配置&quot;">​</a></h2><p>官网下载安装 <a href="https://git-scm.com/docs" target="_blank" rel="noreferrer">Git</a>，一路默认安装，如果需要安装到其他盘符，安装完成后需要配置下全局变量，这一块很简单，自行百度，不做赘述。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>安装路径要求必须全英文路径，且没有空格。<br> 全局变量配置需要根据自己的电脑系统，下面以 w10 为栗，注意路径层级下钻到 <code>/bin</code> 目录。</p></div>',4)),a(e,{src:"img/02.png",title:"Git 全局变量配置"}),i[4]||(i[4]=l(`<p>安装配置完成以后，验证是否安装成功。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 如果下方提示版本信息，表示安装成功</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2.38.1.windows.</span></span></code></pre></div><h2 id="git-的基本使用" tabindex="-1">Git 的基本使用 <a class="header-anchor" href="#git-的基本使用" aria-label="Permalink to &quot;Git 的基本使用&quot;">​</a></h2><p>可以利用终端使用 <code>git</code> 命令行来操作，也可以使用 VSCode 市场的 <code>git</code> 插件进行可视化操作。</p><h3 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">命令名称</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;">git config --global user.name</td><td style="text-align:left;">设置用户签名</td></tr><tr><td style="text-align:left;">git config --global user.email</td><td style="text-align:left;">设置用户邮箱</td></tr><tr><td style="text-align:left;">git config user.name</td><td style="text-align:left;">查看用户签名</td></tr><tr><td style="text-align:left;">git config user.email</td><td style="text-align:left;">查看用户邮箱</td></tr><tr><td style="text-align:left;">git init</td><td style="text-align:left;">初始化本地仓库</td></tr><tr><td style="text-align:left;">git status</td><td style="text-align:left;">查看本地仓库状态</td></tr><tr><td style="text-align:left;">git add 文件名</td><td style="text-align:left;">将工作区内容添加到暂存区</td></tr><tr><td style="text-align:left;">git commit &quot;日志信息&quot; 文件名[可选]</td><td style="text-align:left;">将暂存区内容提交到本地仓库</td></tr><tr><td style="text-align:left;">git push 源或源+指定分支名</td><td style="text-align:left;">将本地仓库内容提交到云端托管平台仓库</td></tr><tr><td style="text-align:left;">git log</td><td style="text-align:left;">查看当前分支历史记录，不含 commit 和已删除的</td></tr><tr><td style="text-align:left;">git reflog</td><td style="text-align:left;">查看所有提交的历史记录 (提供后悔药) 😂</td></tr><tr><td style="text-align:left;">git reset --hard 版本号</td><td style="text-align:left;">俗称回滚，版本(提交历史)切换</td></tr></tbody></table><p>首次安装 Git 必须设置用户签名，否则无法提交代码，设置完成后使用查看指令查看一下即可。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cheny</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cheny@email.com</span></span></code></pre></div><h2 id="项目中常用-git-命令小解" tabindex="-1">项目中常用 Git 命令小解 <a class="header-anchor" href="#项目中常用-git-命令小解" aria-label="Permalink to &quot;项目中常用 Git 命令小解&quot;">​</a></h2><h3 id="git-clone-克隆代码" tabindex="-1">git clone 克隆代码 <a class="header-anchor" href="#git-clone-克隆代码" aria-label="Permalink to &quot;git clone 克隆代码&quot;">​</a></h3><p>将代码从托管平台克隆到本地。</p><div class="tip custom-block"><p class="custom-block-title">命令：<code>git clone</code></p><ul><li>示栗： <code>git clone git@172.16.226.146:ChenYu/project.git</code></li><li>注释：<code>git clone</code> 后面可以是任意代码托管平台上，项目中的 <strong>SSH</strong> 地址或 <strong>HTTPS</strong> 地址，此命令只在初拉取代码使用。</li></ul></div><blockquote><p>🔔 注意：为了方便后续项目分支代码提交，建议初次便配置代码托管平台 SSH 密钥，这里将以 <a href="https://git.code.tencent.com/" target="_blank" rel="noreferrer">工蜂</a> 为栗。</p></blockquote><p>1、生成 .ssh，先打开终端窗口，这里以 <code>Cmder</code> 为栗</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;your email&quot;</span></span></code></pre></div><p>如图：</p>`,16)),a(e,{src:"img/ssh.png",title:".ssh 生成图"}),i[5]||(i[5]=l('<p>看到这样的界面，表示生成成功，然后继续在终端面板输入如下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa.pub</span></span></code></pre></div><p>复制里面的 <strong>ssh-rsa</strong> 公钥信息， <strong>ssh-rsa</strong> 开头，邮箱结尾。</p>',3)),a(e,{src:"img/ras-pub.png",title:".ssh 生成图"}),i[6]||(i[6]=s("p",null,[t("2、然后把复制的信息，塞到代码托管平台 "),s("strong",null,"SSH 配置"),t(" 的地方。")],-1)),a(e,{src:"img/03.png",title:"SSH 配置"}),i[7]||(i[7]=l(`<p>然后就可以愉快的拉取平台上已授权的所有项目代码了。</p><h3 id="git-add-暂存提交" tabindex="-1">git add 暂存提交 <a class="header-anchor" href="#git-add-暂存提交" aria-label="Permalink to &quot;git add 暂存提交&quot;">​</a></h3><p>将工作区代码提交到暂存区。</p><div class="tip custom-block"><p class="custom-block-title">命令：<code>git add</code></p><ul><li>示栗： <code>git add .</code> // 代表提交目录下所有文件，除却 git 过滤的目录。</li><li>注释：<strong>add</strong> 后面是要指定添加到暂存区的文件夹及文件，一般使用 <code>.</code> 代表非过滤的所有文件。</li></ul></div><h3 id="git-status-暂存状态" tabindex="-1">git status 暂存状态 <a class="header-anchor" href="#git-status-暂存状态" aria-label="Permalink to &quot;git status 暂存状态&quot;">​</a></h3><p>查看当前操作的哪些修改被提交到了暂存区。</p><div class="tip custom-block"><p class="custom-block-title">命令：<code>git status</code></p><ul><li>示栗: <code>git status</code></li><li>注释：此命令不显示已经 <code>commit</code> 到本地仓库中的信息。</li></ul></div><h3 id="git-commit-提交本地仓库" tabindex="-1">git commit 提交本地仓库 <a class="header-anchor" href="#git-commit-提交本地仓库" aria-label="Permalink to &quot;git commit 提交本地仓库&quot;">​</a></h3><p>将暂存区代码提交到本地仓库。</p><div class="tip custom-block"><p class="custom-block-title">命令：<code>git commit</code></p><ul><li>示栗: <code>git commit -m &#39;此次提交的描述信息&#39;</code></li><li>注释：执行此命令除了将暂存区代码提交到工作区之外，还生成提交记录可以使用 <code>git log</code> 查看。</li></ul></div><h3 id="git-push-推送远端" tabindex="-1">git push 推送远端 <a class="header-anchor" href="#git-push-推送远端" aria-label="Permalink to &quot;git push 推送远端&quot;">​</a></h3><p>将本地仓储的代码推送到了远端代码托管平台仓库。</p><div class="tip custom-block"><p class="custom-block-title">命令：<code>git push</code></p><ul><li>示栗: <code>git push origin master</code></li><li>注释：<code>origin</code> 是默认别名， <code>master</code> 是指定的推送分支，若只有此分支可以直接执行 <code>git push</code>。</li><li>注意： 如遇交叉开发，每次 <code>push</code> 之前切记 <code>pull</code> 一下，否则会提示本地落后远端导致推送失败。</li></ul></div><h3 id="git-pull-拉取更新" tabindex="-1">git pull 拉取更新 <a class="header-anchor" href="#git-pull-拉取更新" aria-label="Permalink to &quot;git pull 拉取更新&quot;">​</a></h3><p>将远端的仓库代码拉取到本地更新。</p><div class="tip custom-block"><p class="custom-block-title">命令：<code>git pull</code></p><ul><li>示栗: <code>git pull 别名 分支名</code>，如 <code>git pull origin dev</code></li><li>注释：若没有设置多个别名，或已存在默认 <code>origin</code>，直接 <code>git pull</code> 即可。</li><li>注意：协作开发的话，需要解决代码冲突。</li></ul></div><h3 id="git-branch-分支操作" tabindex="-1">git branch 分支操作 <a class="header-anchor" href="#git-branch-分支操作" aria-label="Permalink to &quot;git branch 分支操作&quot;">​</a></h3><p>用来创建分支，查看分支，删除分支。</p><div class="tip custom-block"><p class="custom-block-title">命令：<code>git branch</code></p><ul><li><code>git branch test</code> // 创建 test 分支，test 为自定义的分支名。</li><li><code>git branch -d test</code> // 删除本地自定义的 test 分支。</li><li><code>git branch -D test</code> // 强制删除本地和远端 test 分支。</li><li><code>git branch</code> // 查看本地分支。</li><li><code>git branch -a</code> // 查看所有分支，包括本地和远端。</li><li><code>git branch -m &#39;要修改的名称&#39;</code> // 修改分支名称</li></ul></div><p>🔔 注意：删除远端分支可以使用 <code>git push origin --delete test</code> 强制远端 test 分支。</p><h3 id="git-checkout-切换分支" tabindex="-1">git checkout 切换分支 <a class="header-anchor" href="#git-checkout-切换分支" aria-label="Permalink to &quot;git checkout 切换分支&quot;">​</a></h3><p>用来进行分支的切换。</p><div class="tip custom-block"><p class="custom-block-title">命令：<code>git checkout</code></p><ul><li>示栗: <code>git checkout test</code> | <code>git checkout test_20221106 -b</code></li><li>注释：切换到 <code>test</code> 分支，或者在切换分支的时候创新要切换的新分支。</li><li>注意：切换时当前分支修改已至少进行本地仓库存储 <code>commit</code> 提交。</li></ul></div><h3 id="git-fetch-更新分支" tabindex="-1">git fetch 更新分支 <a class="header-anchor" href="#git-fetch-更新分支" aria-label="Permalink to &quot;git fetch 更新分支&quot;">​</a></h3><p>同步更新远端仓库的分支指针到本地。</p><div class="tip custom-block"><p class="custom-block-title">命令：<code>git fetch</code></p><ul><li>示栗: <code>git fetch</code> | <code>git fetch origin</code></li><li>注释：直白点说就是同步获取远端仓库分支或分支上的的最新状态。</li><li>注意：通过 <code>git branch -a</code>，可以看到同步过来的远端分支，但并不会创建本地分支。</li></ul></div><h3 id="git-stash-临时缓存" tabindex="-1">git stash 临时缓存 <a class="header-anchor" href="#git-stash-临时缓存" aria-label="Permalink to &quot;git stash 临时缓存&quot;">​</a></h3><p>用于临时想要保存当前修改，但想回到之前最后一次提交干净的工作仓库时进行的操作。<br> 看不懂？好吧，场景直白点就是说，想把当前写了一半的代码，临时存储下来做个记号，然后切换到正式分支上处理着急解决的问题，处理完毕以后切换回来继续未完成的代码编写。</p><div class="tip custom-block"><p class="custom-block-title">命令：<code>git stash</code></p><ul><li><code>git stash save test</code> // test 为当前暂存别名。</li><li><code>git stash list</code> // 查看当前工作区暂存的任务列表。</li><li><code>git stash apply stash@{0}</code> // 恢复到指定的暂存区任务编号， stash@{0} 是编号。</li><li><code>git statsh apply</code> // 恢复到当前上一次缓存。</li><li><code>git stash drop stash@{$num}</code> // 丢弃 stash@{$num}存储，从列表中删除这个存储。</li><li><code>git stash clear</code> // 删除所有缓存的 stash。</li></ul></div><h3 id="git-log-和-git-reflog-记录查询" tabindex="-1">git log 和 git reflog 记录查询 <a class="header-anchor" href="#git-log-和-git-reflog-记录查询" aria-label="Permalink to &quot;git log 和 git reflog 记录查询&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">命令：<code>git log</code>| <code>git reflog</code></p><ul><li>示栗: <code>git log</code> | <code>git reflog</code></li><li>注释：查看当前分支已经 <code>commit</code> 以后的历史记录 | 查看所有分支的历史记录。</li><li>注意：执行一些分支回滚动作的时候，一般使用 <code>git log</code> 查看要回退的 <code>hashID</code>。</li></ul></div><h3 id="提交忽略指定文件或目录" tabindex="-1">提交忽略指定文件或目录 <a class="header-anchor" href="#提交忽略指定文件或目录" aria-label="Permalink to &quot;提交忽略指定文件或目录&quot;">​</a></h3><p>若项目不存在 <strong>.gitignore</strong> 文件，在根目录创建，将需要忽略的文件名加进去，每个文件占一行。</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// .gitignore 文件</span></span>
<span class="line"><span>.DS_Store</span></span>
<span class="line"><span>.idea</span></span></code></pre></div><p>或者提交的时候，使用命令强制添加忽略文件。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .DS_Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (.DS_Store </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">是文件名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>项目常用命令大概这些就够了，可视化的 Git 集成到 VSCode 插件集中了，使用很简单不赘述。</p><h2 id="其他高级命令" tabindex="-1">其他高级命令 <a class="header-anchor" href="#其他高级命令" aria-label="Permalink to &quot;其他高级命令&quot;">​</a></h2><p>这些命令一般项目上不常用，但是在根据场景需要的时候，那是大大的便利哇。</p><h3 id="git-checkout-patch-穿梭同步" tabindex="-1">git checkout --patch 穿梭同步 <a class="header-anchor" href="#git-checkout-patch-穿梭同步" aria-label="Permalink to &quot;git checkout --patch 穿梭同步&quot;">​</a></h3><p>用来将其他分支的修改，轻量的将文件上传同步到当前的分支上，这句话也可以反过来解读。</p><div class="tip custom-block"><p class="custom-block-title">命令：<code>git checkout --patch</code></p><ul><li>示栗: <code>git checkout --patch dev_cheny src/demo.js</code></li><li>注释：比如当前在 master 分支上，将 dev_cheny 分支上的 src 目录下的 demo.js 合并过来。</li><li>注意：使用记得提交当前修改，避免穿梭带来问题。</li></ul></div><h3 id="git-remote-远程操作" tabindex="-1">git remote 远程操作 <a class="header-anchor" href="#git-remote-远程操作" aria-label="Permalink to &quot;git remote 远程操作&quot;">​</a></h3><p>对于远程仓储地址信息的查看，设置（包括别名，fetct / push 地址）。</p><div class="tip custom-block"><p class="custom-block-title"><strong>命令</strong> <code>git remote</code></p><ul><li><code>git remote -v</code> // 查看当前项目远程地址信息，包含 push 和 fetch 的地址。</li><li><code>git remote add 别名 &#39;SSH地址信息&#39;</code> // 添加当前项目远程地址信息，可以添加多个远端地址。</li><li><code>git remote remove &#39;别名&#39;</code> // 删除当前项目远程地址信息</li></ul></div><h3 id="git-push-u-默认推送" tabindex="-1">git push -u 默认推送 <a class="header-anchor" href="#git-push-u-默认推送" aria-label="Permalink to &quot;git push -u 默认推送&quot;">​</a></h3><p>指定默认推送地址，使用别名即可。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myhub</span></span></code></pre></div><p>🔔 注意：这里的 <code>myhub</code> 是 <code>git remote add</code> 添加地址设置的别名，等同默认的 <code>origin</code>。</p><h3 id="git-fetch-prune-origin" tabindex="-1">git fetch --prune origin <a class="header-anchor" href="#git-fetch-prune-origin" aria-label="Permalink to &quot;git fetch --prune origin&quot;">​</a></h3><p>用来标注已经删除的分支。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prune</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span></span></code></pre></div><p>🔔 注意：看到 <code>:gone</code>  的标识，说明远程分支已经被删除。</p><h3 id="git-branch-vv-失效分支" tabindex="-1">git branch -vv 失效分支 <a class="header-anchor" href="#git-branch-vv-失效分支" aria-label="Permalink to &quot;git branch -vv 失效分支&quot;">​</a></h3><p>用来查看关联失效的分支。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vv</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span></code></pre></div><h3 id="git-branch-set-upstream-to" tabindex="-1">git branch --set-upstream-to <a class="header-anchor" href="#git-branch-set-upstream-to" aria-label="Permalink to &quot;git branch --set-upstream-to&quot;">​</a></h3><p>设置默认推送和拉取追踪的分支，比如使 <code>git pll</code> 等同于 <code>git pull origin master</code> 。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set-upstream-to=origin/master</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><h3 id="git-diff-版本比对" tabindex="-1">git diff 版本比对 <a class="header-anchor" href="#git-diff-版本比对" aria-label="Permalink to &quot;git diff 版本比对&quot;">​</a></h3><p>用来比较不同版本之间的差异，可以同分支，也可以不同分支之间进行比较。</p><p><strong>同分支不同版本</strong></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>当前与历史版本的对比</strong></p><ul><li><code>git log </code> // 找到提交记录的 id</li><li><code>git diff commitId</code> // commitId 就是提交记录中的 id, 跟该 id 版本进行比对</li></ul><p><strong>两个历史版本的对比</strong></p><ul><li><code>git diff id1 id2</code> // 传递两个对比的版本号 id 即可</li></ul></div><p>🔔 注意：不给第三个参数，也就是 commitId 的话, 默认跟上一次提交的版本比较。</p><p><strong>跨分支版本对比</strong></p><p>当前分支跟其他分支做比较。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diff</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev_base_cheny</span></span></code></pre></div><h3 id="git-cherry-pick-条件合并" tabindex="-1">git cherry-pick 条件合并 <a class="header-anchor" href="#git-cherry-pick-条件合并" aria-label="Permalink to &quot;git cherry-pick 条件合并&quot;">​</a></h3><p>用来复制记录到当前分支，该命令可以避免将整个分支合并过来，只合并需要的版本记录。</p><div class="tip custom-block"><p class="custom-block-title"><strong>命令</strong> <code>cherry-pick</code></p><ul><li>比如在 <code>develop</code> 分支找到稳定版本的 <code>commitid</code>。</li><li>切换分支到 <code>test</code> 然后依次执行  <code>git cherry-pick</code>  命令。</li><li>最后通过  <code>git log</code>  检查是否正确。</li></ul></div><h2 id="谨慎操作的命令" tabindex="-1">谨慎操作的命令 <a class="header-anchor" href="#谨慎操作的命令" aria-label="Permalink to &quot;谨慎操作的命令&quot;">​</a></h2><h3 id="恢复已删除、误删除的分支" tabindex="-1">恢复已删除、误删除的分支 <a class="header-anchor" href="#恢复已删除、误删除的分支" aria-label="Permalink to &quot;恢复已删除、误删除的分支&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>通过 <code>git reflog show</code> 查看提交日志 找到对应的 <code>commitID</code>。</li><li>以 <code>commit_id</code>  方式建立一个新的分支作为要恢复的分支名，参考命令如下：</li></ul></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  retest_v3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  b52b955</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 这个</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 编号就是提交的历史版本编号。</span></span></code></pre></div><h3 id="revert-的版本回滚" tabindex="-1">revert  的版本回滚 <a class="header-anchor" href="#revert-的版本回滚" aria-label="Permalink to &quot;revert  的版本回滚&quot;">​</a></h3><p>🔔 跟 <code>reset</code> 有较大区别， <code>revert</code> 去恢复某个版本代码时，<strong>Git</strong> 只会撤销指定版本的代码，而不是指定版本后的所有版本。</p><p>比如说你提交了 1、2、3 三个版本，当你撤销版本 2 的时候，会生成版本 4，但是不会对版本 3 产生影响。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> revert</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 6d8feb147973711d08211f953f3d7c463ee1e88f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 这是一个</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commitID</span></span></code></pre></div><p>执行该命令以后，需要我们编辑一些备注信息，编辑完成以后 esc &amp;&amp; :wq 即可！</p><div class="tip custom-block"><p class="custom-block-title">注意几个区别：</p><ul><li><code>git reset</code>  命令会改变之前的版本记录，可能会导致不能提交到远程仓库。</li><li><code>git revert</code>  命令只会撤销某个版本的代码，然后在当前分支增加一条版本新记录。</li><li><code>git revert</code>  只会撤销指定版本的代码，而不是指定版本后的所有版本。</li></ul></div><h3 id="svn-迁移代码到-git" tabindex="-1">svn 迁移代码到 git <a class="header-anchor" href="#svn-迁移代码到-git" aria-label="Permalink to &quot;svn 迁移代码到 git&quot;">​</a></h3><p>1、使用 <code>git svn clone -r</code> 命令克隆 svn 地址。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> svn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 6000:HEAD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://svn.data.tzecc.com/svn/bgy/src/trunk/new_bgy/Web</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-metadata</span></span></code></pre></div><p>2、创建 Gitlab 或者其他代码托管平台项目，这里以 Gitlab 举栗。</p><p>3、设置 GitLab 远端地址源。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bgy_admin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@172.16.226.146:ChenYu/bgy_admin.git</span></span></code></pre></div><p>4、设置推送的默认分支。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set-upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bgy_admin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><p>5 　如果不成功就先执行一下合并。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rebase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><p>🔔 注意：要迁移的代码可能体量很大，老项目有非常多的提交记录，可以进行优雅的合并，使用 <code>git rebase</code> 来完成，使提交记录更整洁，非主合并分支记录在下方。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>在使用 <code>merge</code> 的时候，建议使用 <code>rebase</code> ，使其提交历史记录更清晰。</li><li><code>merge</code> 合并的代码，版本记录会按照时间顺序排序，并自动产生一个  <strong>Merge branch</strong>。</li><li><code>rebase </code> 合并代码之后，版本记录会将目标分支放在后面，当前分支的版本记录放在前边。</li></ul></div><p>针对老的项目，还可以克隆最新的一次的版本，或者只获取它最近量次的提交记录。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://gitee.com/songboy/test201907.git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  tempdemo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --depth==1</span></span></code></pre></div><h3 id="优雅清空版本记录" tabindex="-1">优雅清空版本记录 <a class="header-anchor" href="#优雅清空版本记录" aria-label="Permalink to &quot;优雅清空版本记录&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --orphan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new_branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 切换的新分支拿到最近一次的记录。</span></span></code></pre></div><p>对于老项目，大量早起无用的历史记录，使用这种清空方式比较优雅，应该叫做重生或金蝉脱壳，不是彻底删除，不能往那面想哦，小心腿打断。。。</p><h2 id="其他统计查看命令" tabindex="-1">其他统计查看命令 <a class="header-anchor" href="#其他统计查看命令" aria-label="Permalink to &quot;其他统计查看命令&quot;">​</a></h2><h3 id="查看提交次数" tabindex="-1">查看提交次数 <a class="header-anchor" href="#查看提交次数" aria-label="Permalink to &quot;查看提交次数&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$ git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --oneline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  查看总提交次数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --author=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户名&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --oneline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看某个用户提交次数 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shortlog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看每个用户提交次数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pretty=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;%aN&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sort</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 贡献者统计</span></span></code></pre></div><h3 id="查看总代码行数" tabindex="-1">查看总代码行数 <a class="header-anchor" href="#查看总代码行数" aria-label="Permalink to &quot;查看总代码行数&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --since=2021-03-20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --until=2021-11-30</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pretty=tformat:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --numstat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{ add += $1; subs += $2; loc += $1 - $2 } END { printf &quot;added lines: %s, removed lines: %s, total lines: %s\\n&quot;, add, subs, loc }&#39;</span></span></code></pre></div><h3 id="统计每个人删除的行数" tabindex="-1">统计每个人删除的行数 <a class="header-anchor" href="#统计每个人删除的行数" aria-label="Permalink to &quot;统计每个人删除的行数&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --format=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;%aN&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sort</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> read</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -en</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --author=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pretty=tformat:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --numstat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{ add += $1; subs += $2; loc += $1 - $2 } END { printf &quot;added lines: %s, removed lines: %s, total lines: %s &quot;, add, subs, loc }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><h3 id="根据用户名统计" tabindex="-1">根据用户名统计 <a class="header-anchor" href="#根据用户名统计" aria-label="Permalink to &quot;根据用户名统计&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --author=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pretty=tformat:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --numstat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{ add += $1; subs += $2; loc += $1 - $2 } END { printf &quot;added lines: %s, removed lines: %s, total lines: %s\\n&quot;, add, subs, loc }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span></span></code></pre></div><h3 id="某用户时间范围的提交数" tabindex="-1">某用户时间范围的提交数 <a class="header-anchor" href="#某用户时间范围的提交数" aria-label="Permalink to &quot;某用户时间范围的提交数&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --author=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户名&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --since=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2014-07-01&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --oneline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span></span></code></pre></div>`,108))])}const v=p(r,[["render",c]]);export{m as __pageData,v as default};
