/**
 * name: agile-team-doc
 * version: v2.1.0
 * description: 敏捷团队构建的线上文档，希望同时帮助到团队伙伴和社区的大家
 * author: CHENY <ycyplus@gmail.com>
 * homepage: undefined
 */
import{_ as o,C as h,c as i,o as l,aQ as e,G as t}from"./chunks/framework.BjhQmtN6.js";const m=JSON.parse('{"title":"原则","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"po/standard/principle.md","filePath":"po/standard/principle.md","lastUpdated":1702525278000}'),n={name:"po/standard/principle.md"};function p(d,a,s,c,b,u){const r=h("ElImg");return l(),i("div",null,[a[0]||(a[0]=e('<h1 id="原则" tabindex="-1">原则 <a class="header-anchor" href="#原则" aria-label="Permalink to &quot;原则&quot;">​</a></h1><h2 id="亲密性" tabindex="-1">亲密性 <a class="header-anchor" href="#亲密性" aria-label="Permalink to &quot;亲密性&quot;">​</a></h2><p>如果信息之间关联性越高，它们之间的距离就应该越接近，也越像一个视觉 单元；反之，则它们的距离就应该越远，也越像多个视觉单元。亲密性的根本目 的是实现组织性，让用户对页面结构和信息层次一目了然。</p><h2 id="纵向间距关系" tabindex="-1">纵向间距关系 <a class="header-anchor" href="#纵向间距关系" aria-label="Permalink to &quot;纵向间距关系&quot;">​</a></h2><p>通过『小号间距』、『中号间距』、『大号间距』这三种规格来划分信息层 次。在这三种规格不适用的情况下，可以通过加减『基础间距』的倍数，或者增 加元素来拉开信息层次。</p><h2 id="横向间距关系" tabindex="-1">横向间距关系 <a class="header-anchor" href="#横向间距关系" aria-label="Permalink to &quot;横向间距关系&quot;">​</a></h2><p>为了适用不同尺寸的屏幕，在横向采用栅格布局来排布组件，从而保证布局 的灵活性。</p><h2 id="对齐" tabindex="-1">对齐 <a class="header-anchor" href="#对齐" aria-label="Permalink to &quot;对齐&quot;">​</a></h2><p>正如『格式塔学派』中的连续律（Law of Continuity）所描述的，在知觉过程 中人们往往倾向于使知觉对象的直线继续成为直线，使曲线继续成为曲线。在界 面设计中，将元素进行对齐，既符合用户的认知特性，也能引导视觉流向，让用 户更流畅地接收信息。</p><h2 id="文案类对齐" tabindex="-1">文案类对齐 <a class="header-anchor" href="#文案类对齐" aria-label="Permalink to &quot;文案类对齐&quot;">​</a></h2><p>如果页面的字段或段落较短、较散时，需要确定一个统一的视觉起点。</p><h2 id="表单类对齐" tabindex="-1">表单类对齐 <a class="header-anchor" href="#表单类对齐" aria-label="Permalink to &quot;表单类对齐&quot;">​</a></h2><p>冒号对齐（右对齐）能让内容锁定在一定范围内，让用户眼球顺着冒号的视 觉流，就能找到所有填写项，从而提高填写效率。</p><h2 id="数字类对齐" tabindex="-1">数字类对齐 <a class="header-anchor" href="#数字类对齐" aria-label="Permalink to &quot;数字类对齐&quot;">​</a></h2><p>为了快速对比数值大小，建议所有数值取相同有效位数，并且右对齐。</p><h2 id="对比" tabindex="-1">对比 <a class="header-anchor" href="#对比" aria-label="Permalink to &quot;对比&quot;">​</a></h2><p>对比是增加视觉效果最有效方法之一，同时也能在不同元素之间建立一种有 组织的层次结构，让用户快速识别关键信息。</p><h2 id="主次关系对比" tabindex="-1">主次关系对比 <a class="header-anchor" href="#主次关系对比" aria-label="Permalink to &quot;主次关系对比&quot;">​</a></h2><p>为了让用户能在操作上（类似表单、弹出框等场景）快速做出判断， 来突 出其中一项相对更重要或者更高频的操作。注意：突出的方法，不局限于强化重 点项，也可以是弱化其他项。在一些需要用户慎重决策的场景中，系统应该保持 中立，不能替用户或者诱导用户做出判断。</p><h2 id="总分关系对比" tabindex="-1">总分关系对比 <a class="header-anchor" href="#总分关系对比" aria-label="Permalink to &quot;总分关系对比&quot;">​</a></h2><p>通过调整排版、字体、大小等方式来突出层次感，区分总分关系，使得页面 更具张力和节奏感。</p><h2 id="状态关系对比" tabindex="-1">状态关系对比 <a class="header-anchor" href="#状态关系对比" aria-label="Permalink to &quot;状态关系对比&quot;">​</a></h2><p>通过改变颜色、增加辅助形状等方法来实现状态关系的对比，以便用户更好 的区分信息。</p><h2 id="重复" tabindex="-1">重复 <a class="header-anchor" href="#重复" aria-label="Permalink to &quot;重复&quot;">​</a></h2><p>相同的元素在整个界面中不断重复，不仅可以有效降低用户的学习成本，也可以帮助用户识别出这些元素之间的关联性。<br> 重复元素可以是一条粗线、一种线框，某种相同的颜色、设计要素、设计风格，某种格式、空间关系等。</p><h2 id="直截了当" tabindex="-1">直截了当 <a class="header-anchor" href="#直截了当" aria-label="Permalink to &quot;直截了当&quot;">​</a></h2><p>正如 Alan Cooper 所言：『需要在哪里输出，就要允许在哪里输入』。<br> 这就是直接操作的原理。<br> eg：不要为了编辑内容而打开另一个页面，应该直接在上下 文中实现编辑。</p><h2 id="页内编辑" tabindex="-1">页内编辑 <a class="header-anchor" href="#页内编辑" aria-label="Permalink to &quot;页内编辑&quot;">​</a></h2><p>当『易读性』远比『易编辑性』重要时，可以使用『单击编辑』。<br> 当『易读性』为主，同时又要突出操作行的『易编辑性』时，可使用『文字链/图标编辑』。</p><h2 id="利用拖放" tabindex="-1">利用拖放 <a class="header-anchor" href="#利用拖放" aria-label="Permalink to &quot;利用拖放&quot;">​</a></h2><p>拖放列表只能限制在一个维度（上/下或者左/右）进行拖放。</p><h2 id="足不出户" tabindex="-1">足不出户 <a class="header-anchor" href="#足不出户" aria-label="Permalink to &quot;足不出户&quot;">​</a></h2><p>能在这个页面解决的问题，就不要去其它页面解决，因为任何页面刷新和跳转都会引起变化盲视（Change Blindness），导致用户心流（Flow）被打断。<br> 频繁的页面刷新和跳转，就像在看戏时，演员说完一行台词就安排一次谢幕一样。</p><h2 id="覆盖层" tabindex="-1">覆盖层 <a class="header-anchor" href="#覆盖层" aria-label="Permalink to &quot;覆盖层&quot;">​</a></h2><p>二次确认覆盖层：避免滥用 Modal 进行二次确认，应该勇敢的让用户去尝 试，给用户机会『撤销』即可。</p><p>详情覆盖层：一般在列表中，通过用户『悬停』/『点击』某个区块，在当前页加载该条列表项的更多详情信息。</p><p>输入覆盖层：在覆盖层上，让用户直接进行少量字段的输入。</p><h2 id="嵌入层" tabindex="-1">嵌入层 <a class="header-anchor" href="#嵌入层" aria-label="Permalink to &quot;嵌入层&quot;">​</a></h2><p>列表嵌入层：在列表中，显示某条列表项的详情信息，保持上下文不中断。<br> 标签页：将多个平级的信息进行整理和分类了，一次只显示一组信息。</p><h2 id="虚拟页面" tabindex="-1">虚拟页面 <a class="header-anchor" href="#虚拟页面" aria-label="Permalink to &quot;虚拟页面&quot;">​</a></h2><p>在交互过程中，『覆盖层』可以在当前页面上方显示附加内容和交互链接；『嵌入层』可以在页面内部实现同样效果；而『虚拟页面』不局限机械时代的『页面』，可以利用信息时代的特点构建一种新型『页面』。</p><h2 id="流程处理" tabindex="-1">流程处理 <a class="header-anchor" href="#流程处理" aria-label="Permalink to &quot;流程处理&quot;">​</a></h2><p>长期以来，Web 实现流程的方式就是把每个步骤放在一个单独的页面上。<br> 虽然这种做法是分解问题最简单的方式，但并不是最佳解决方案。对于某些『流程处理』而言，让用户始终待在同一个页面上则更有必要。</p><p>渐进式展现：基于用户的操作/某种特定规则，渐进式展现不同的操作选项。 配置程序：通过提供一系列的配置项，帮助用户完成任务或者产品组装。</p><p>弹出框覆盖层：虽然弹出框的出现会打断用户的心流，但是有时候在弹出框 中使用『步骤条』来管理复杂流程也是可行的。</p><h2 id="简化交互" tabindex="-1">简化交互 <a class="header-anchor" href="#简化交互" aria-label="Permalink to &quot;简化交互&quot;">​</a></h2><p>根据费茨法则（Fitts&#39;s Law）所描述的，如果用户鼠标移动距离越少、对象相对目标越大，那么用户越容易操作。通过运用上下文工具（即：放在内容中的操作工具），使内容和操作融合，从而简化交互。</p><h2 id="实时可见工具" tabindex="-1">实时可见工具 <a class="header-anchor" href="#实时可见工具" aria-label="Permalink to &quot;实时可见工具&quot;">​</a></h2><p>如果某个操作非常重要，就应该把它放在界面中，并实时可见。</p><h2 id="悬停即现工具" tabindex="-1">悬停即现工具 <a class="header-anchor" href="#悬停即现工具" aria-label="Permalink to &quot;悬停即现工具&quot;">​</a></h2><p>如果某个操作不那么重要，或者使用『实时可见工具』过于啰嗦会影响用户阅读时，可以在悬停在该对象上时展示操作项。</p><h2 id="开关显示工具" tabindex="-1">开关显示工具 <a class="header-anchor" href="#开关显示工具" aria-label="Permalink to &quot;开关显示工具&quot;">​</a></h2><p>如果某些操作只需要在特定模式时显示，可以通过开关来实现。</p><h2 id="可视区域-可点击区域" tabindex="-1">可视区域 ≠ 可点击区域 <a class="header-anchor" href="#可视区域-可点击区域" aria-label="Permalink to &quot;可视区域 ≠ 可点击区域&quot;">​</a></h2><p>在使用 Table 时，文字链的点击范围受到文字长短影响，可以设置整个单元格为热区，以便用户触发。</p><p>当需要增强按钮的响应性时，可以通过增加用户点击热区的范围，而不是增大按钮形状，从而增强响应性，又不缺失美感。</p><h2 id="提供邀请" tabindex="-1">提供邀请 <a class="header-anchor" href="#提供邀请" aria-label="Permalink to &quot;提供邀请&quot;">​</a></h2><p>很多富交互模式（eg：『拖放』、『行内编辑』、『上下文工具』）都有一个共同问题，就是缺少易发现性。所以『提供邀请』是成功完成人机交互的关键所在。</p><p>邀请就是引导用户进入下一个交互层次的提醒和暗示，通常包括意符（eg：实时的提示信息）和可供性，以表明在下一个界面可以做什么。当可供性中可感知的部分（Perceived Affordance）表现为意符时，人机交互的过程往往更加自然、顺畅。</p>',59)),t(r,{src:"po/1.png"}),a[1]||(a[1]=e('<h2 id="静态邀请" tabindex="-1">静态邀请 <a class="header-anchor" href="#静态邀请" aria-label="Permalink to &quot;静态邀请&quot;">​</a></h2><p>指通过可视化技术在页面上提供引导交互的邀请。</p><p>引导操作邀请：一般以静态说明形式出现在页面上，不过它们在视觉上也可以表现出多种不同样式。常见类型：『文本邀请』、『白板式邀请』、『未完成邀请』。</p><p>漫游探索邀请：是向用户介绍新功能的好方法，尤其是对于那些设计优良的界面。</p><p>但是它不是『创口贴』，仅通过它不能解决界面交互的真正问题。</p><h2 id="动态邀请" tabindex="-1">动态邀请 <a class="header-anchor" href="#动态邀请" aria-label="Permalink to &quot;动态邀请&quot;">​</a></h2><p>指以响应用户在特定位置执行特定操作的方式，提供特定的邀请。</p><p>悬停邀请：在鼠标悬停期间提供邀请。<br> 推论邀请：用于交互期间，合理推断用户可能产生的需求。</p><p>更多内容邀请：用于邀请用户查看更多内容。</p><h2 id="巧用过渡" tabindex="-1">巧用过渡 <a class="header-anchor" href="#巧用过渡" aria-label="Permalink to &quot;巧用过渡&quot;">​</a></h2><p>人脑灰质（Gray Matter）会对动态的事物（eg：移动、形变、色变等）保持敏感。在界面中，适当的加入一些过渡效果，能让界面保持生动，同时也能增强用户和界面的沟通。此章节请参见在线文档。</p><h2 id="即时反应" tabindex="-1">即时反应 <a class="header-anchor" href="#即时反应" aria-label="Permalink to &quot;即时反应&quot;">​</a></h2><p>『提供邀请』的强大体现在交互之前给出反馈，解决易发现性问题；『巧用过渡』的有用体现在它能够在交互期间为用户提供视觉反馈；『即时反应』的重要性体现在交互之后立即给出反馈。</p><p>就像『牛顿第三定律』所描述作用力和反作用一样，用户进行了操作或者内部数据发生了变化，系统就应该立即有一个对应的反馈，同时输入量级越大、重要性越高，那么反馈量级越大、重要性越高。</p><p>虽然反馈太多（准确的说，错误的反馈太多）是一个问题，但是反馈太少甚至没有反馈的系统，则让人感觉迟钝和笨拙，用户体验更差。</p>',15)),t(r,{src:"po/2.png"}),a[2]||(a[2]=e('<h2 id="查询模式" tabindex="-1">查询模式 <a class="header-anchor" href="#查询模式" aria-label="Permalink to &quot;查询模式&quot;">​</a></h2><p>自动完成：用户输入时，下拉列表会随着输入的关键词显示匹配项。根据查询结果分类的多少，可以分为『确定类目』、『不确定类目』两种类型。</p><p>实时搜索：随着用户输入，实时显示搜索结果。『自动完成』、『实时建议』的近亲。</p><h2 id="反馈模式" tabindex="-1">反馈模式 <a class="header-anchor" href="#反馈模式" aria-label="Permalink to &quot;反馈模式&quot;">​</a></h2><p>实时预览：在用户提交输入之前，让他先行了解系统将如何处理他的输入。</p><p>渐进式展现：在必要的时候提供必要的提示，而不是一股脑儿显示所有提示，导致界面混乱，增加认知负担。</p><p>进度指示：当一个操作需要一定时间完成时，就需要即时告知进度，保持与用户的沟通。</p><p>常见的进度指示：『按钮加载』、『表格加载』、『富列表加载』、『页面加载』。可根据操作的量级和重要性，展示不同类型的进度指示。</p><p>点击刷新：告知用户有新内容，并提供按钮等工具帮助用户查看新内容。</p><p>定时刷新：无需用户介入，定时展示新内容。</p>',10))])}const f=o(n,[["render",p]]);export{m as __pageData,f as default};
