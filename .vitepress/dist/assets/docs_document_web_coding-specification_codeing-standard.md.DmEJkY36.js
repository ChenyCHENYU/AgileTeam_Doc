import{_ as p,I as h,c as k,o as d,j as s,J as l,af as t,a,w as r}from"./chunks/framework.hRqtpD5c.js";const A=JSON.parse('{"title":"渐进式 \\"编码规范\\"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/document/web/coding-specification/codeing-standard.md","filePath":"docs/document/web/coding-specification/codeing-standard.md"}'),g={name:"docs/document/web/coding-specification/codeing-standard.md"};function E(o,i,c,y,u,b){const e=h("ElCard"),n=h("ElImg");return d(),k("div",null,[i[1]||(i[1]=s("h1",{id:"渐进式-编码规范",tabindex:"-1"},[a('渐进式 "编码规范" '),s("a",{class:"header-anchor",href:"#渐进式-编码规范","aria-label":'Permalink to “渐进式 "编码规范"”'},"​")],-1)),i[2]||(i[2]=s("blockquote",null,[s("p",null,"编码规范在程序开发中是非常重要的，比如规范中的命名一块，一个不好的命名，可能会引起别人错误理解，对开发效率，项目的质量影响很大，从维护项目上，遵循一套严格的命名规范，无论是对自己还是接手的他人，都会大大降低代码的维护成本，为了大家聚焦参考，从命名开始，将以 Demo 项目逐层下钻的方式展开介绍。")],-1)),i[3]||(i[3]=s("h2",{id:"前端开发标准化的意义",tabindex:"-1"},[a("前端开发标准化的意义 ？ "),s("a",{class:"header-anchor",href:"#前端开发标准化的意义","aria-label":"Permalink to “前端开发标准化的意义 ？”"},"​")],-1)),l(e,null,{default:r(()=>i[0]||(i[0]=[s("p",null,[a("- 坚持一致的风格指南；"),s("br"),a(" - 有效注释，保持干燥，提升抽象复用，增强开发能力；"),s("br"),a(" - 确保代码可读性，易用性，维护性；"),s("br"),a(" - 避免重复造轮子；"),s("br"),a(" - 有效的版本控制，有利于项目管理，代码质量把控；"),s("br"),a(" - 对修改关闭，拓展开放，提高开发的生产力；"),s("br"),a(" - 赋能交叉协同的沟通效率，相互合作，减少差错和误解；"),s("br"),a(" - 相互驱动，奖励编码，OneTeam，一起玩的 Happy。")],-1)])),_:1,__:[0]}),i[4]||(i[4]=t(`<h2 id="命名规则" tabindex="-1">命名规则 <a class="header-anchor" href="#命名规则" aria-label="Permalink to “命名规则”">​</a></h2><blockquote><p>坚持制定好的代码规范，无论团队人数多少，代码应该同出一门。<br> 如果你觉得这个规范有不合理的地方。请提出你的建议来讨论。</p></blockquote><h3 id="项目命名" tabindex="-1">项目命名 <a class="header-anchor" href="#项目命名" aria-label="Permalink to “项目命名”">​</a></h3><p>全部采用小写方式，以下划线分割。</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>栗：my_project_name</span></span></code></pre></div><h3 id="目录命名" tabindex="-1">目录命名 <a class="header-anchor" href="#目录命名" aria-label="Permalink to “目录命名”">​</a></h3><p>全部采用小写方式，以中划线分割，有复数结构时，要采用复数命名法。</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>栗：scripts, styles, images, data-models</span></span></code></pre></div><h3 id="js-文件命名" tabindex="-1">JS 文件命名 <a class="header-anchor" href="#js-文件命名" aria-label="Permalink to “JS 文件命名”">​</a></h3><p>参照目录命名，全部采用小写方式，以中划线分割。</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>栗：account-model.js</span></span></code></pre></div><h3 id="css-scss-文件命名" tabindex="-1">CSS, SCSS 文件命名 <a class="header-anchor" href="#css-scss-文件命名" aria-label="Permalink to “CSS, SCSS 文件命名”">​</a></h3><p>参照目录命名，全部采用小写方式，以中划线分割。</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>栗：retina-sprites.scss</span></span></code></pre></div><h3 id="template-规则" tabindex="-1">Template 规则 <a class="header-anchor" href="#template-规则" aria-label="Permalink to “Template 规则”">​</a></h3><ul><li>嵌套的节点应该缩进 2 个空格；</li><li>在属性上，使用双引号，不要使用单引号；</li><li>属性名全小写，用中划线做分隔符。</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello-world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, world!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="属性顺序" tabindex="-1">属性顺序 <a class="header-anchor" href="#属性顺序" aria-label="Permalink to “属性顺序”">​</a></h3><p>属性应该按照特定的顺序出现以保证易读性。</p><p>- class；<br> - id；<br> - name；<br> - data-*；<br> - src, for, type, href, value , max-length, max, min, pattern；<br> - placeholder, title, alt；<br> - aria-*, role；<br> - required, readonly, disabled。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;...&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;...&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-modal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;toggle&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Example link&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="boolean-属性" tabindex="-1">boolean 属性 <a class="header-anchor" href="#boolean-属性" aria-label="Permalink to “boolean 属性”">​</a></h3><p>boolean 属性不需要声明取值的属性，属性的存在表示取值为 true，不存在则表示取值为 false。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;checkbox&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">option</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> selected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="减少标签数量" tabindex="-1">减少标签数量 <a class="header-anchor" href="#减少标签数量" aria-label="Permalink to “减少标签数量”">​</a></h3><p>遵循一个设计原则，在编写 HTML 代码时，需要尽量避免多余的父节点，任何时候都要用尽量小的复杂度和尽量少的标签来解决问题。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- Not well --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;avatar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- Better --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;avatar&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="css-scss-定义命名" tabindex="-1">CSS,SCSS 定义命名 <a class="header-anchor" href="#css-scss-定义命名" aria-label="Permalink to “CSS,SCSS 定义命名”">​</a></h3><ul><li>类名使用小写字母，以中划线分隔</li><li>id 采用驼峰式命名</li><li>scss 中的变量、函数、混合、placeholder 采用驼峰式命名</li></ul><div class="language-scss"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* class */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.element-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* id */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#myDialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 变量 */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$colorBlack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 函数 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@function</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pxToRem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 混合 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@mixin</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> centerBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* placeholder */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">%myDialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="单行注释" tabindex="-1">单行注释 <a class="header-anchor" href="#单行注释" aria-label="Permalink to “单行注释”">​</a></h3><ul><li>双斜线后，必须跟一个空格；</li><li>缩进与下一行代码保持一致；</li><li>可位于一个代码行的末尾，与代码间隔一个空格。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // if you made it here, then all security checks passed</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  allowed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zhangsan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zhangsan&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // one space after code</span></span></code></pre></div><h3 id="多行注释" tabindex="-1">多行注释 <a class="header-anchor" href="#多行注释" aria-label="Permalink to “多行注释”">​</a></h3><p>最少三行, &#39;*&#39;后跟一个空格，建议在以下情况下使用，具体参照下边的写法：</p><ul><li>难于理解的代码段；</li><li>可能存在错误的代码段；</li><li>浏览器特殊的 HACK 代码；</li><li>业务逻辑强相关的代码。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * one space after &#39;*&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><h3 id="文档注释" tabindex="-1">文档注释 <a class="header-anchor" href="#文档注释" aria-label="Permalink to “文档注释”">​</a></h3><p>建议在以下情况下使用：</p><ul><li>所有常量；</li><li>所有函数；</li><li>所有类。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@desc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 一个带参数的函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 参数a</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">=1 - 参数b默认值为1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">=1 - 参数c有两种支持的取值&lt;/br&gt;1—表示x&lt;/br&gt;2—表示xx</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 参数d为一个对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d.e</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 参数d的e属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d.f</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 参数d的f属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {object[]}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 参数g为一个对象数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.h</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 参数g数组中一项的h属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.i</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 参数g数组中一项的i属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [j]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 参数j是一个可选参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">j</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="变量命名" tabindex="-1">变量命名 <a class="header-anchor" href="#变量命名" aria-label="Permalink to “变量命名”">​</a></h3><p>标准变量采用驼峰式命名（除了对象的属性外）；</p><ul><li>&#39;ID&#39;在变量名中全大写</li><li>&#39;URL&#39;在变量名中全大写</li><li>常量全大写，用下划线连接</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> thisIsMyName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cheny&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> goodID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;88888888&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reportURL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://www.tzagileteam.com&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MAX_COUNT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><h3 id="括号" tabindex="-1">括号 <a class="header-anchor" href="#括号" aria-label="Permalink to “括号”">​</a></h3><p>下列关键字后必须有大括号（即使代码块的内容只有一行）：<br><code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>do</code>, <code>switch,</code> <code>try</code>, <code>catch</code>, <code>finally</code>, <code>with</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// not good</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// good</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="undefined" tabindex="-1">undefined <a class="header-anchor" href="#undefined" aria-label="Permalink to “undefined”">​</a></h3><ul><li>永远不要直接使用 undefined 进行变量判断；</li><li>使用 typeof 和字符串&#39;undefined&#39;对变量进行判断。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// not good</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// good</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;undefined&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>更多其他的格式标准化，已配置在 vscode 和插件集了，无需关注，直接使用感受即可。</p><h2 id="通用约定俗成" tabindex="-1">通用约定俗成 <a class="header-anchor" href="#通用约定俗成" aria-label="Permalink to “通用约定俗成”">​</a></h2><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><ul><li>不要拼写错误单词</li><li>不要中英文混用</li><li>不要 1-9 a-z 命名</li><li>不要混用命名 （不同文件相同组件内命名不一致）</li><li>单复数不分</li><li>js 使用驼峰命名法：类名首字母必须大写 ，js 用单引号，不带结尾</li><li>css 命名全部小写 html 对大小写不敏感 见名知义使用 - 隔开</li><li>针对特型命名，自定义命名，需见名知意，完全按照命名规范</li><li>合理分类解耦，HTML,CSS,JS 带代码结构上尽量做到互相隔离</li></ul></div><p>除了通用这些，其他感兴趣的话，参考 <a href="https://github.com/ktaranov/naming-convention" target="_blank" rel="noreferrer">Github 命名规范</a> 了解更多哦。</p><h2 id="项目约定俗成" tabindex="-1">项目约定俗成 <a class="header-anchor" href="#项目约定俗成" aria-label="Permalink to “项目约定俗成”">​</a></h2><h3 id="目录定义" tabindex="-1">目录定义 <a class="header-anchor" href="#目录定义" aria-label="Permalink to “目录定义”">​</a></h3>`,57)),l(n,{src:"img/project-dir.png",title:"vscode, Project Dirs"}),i[5]||(i[5]=t(`<h3 id="命名定义" tabindex="-1">命名定义 <a class="header-anchor" href="#命名定义" aria-label="Permalink to “命名定义”">​</a></h3><blockquote><p>🔔 此定义面向的技术选型是前端框架 <a href="https://cn.vuejs.org/" target="_blank" rel="noreferrer">Vue</a> 生态，如全家桶，Pinia，TypeScript 以及 UI 框架，下文以 Vue3.2，UI 框架 <a href="https://element-plus.gitee.io/zh-CN/" target="_blank" rel="noreferrer">ElementPlus</a> 为栗，余者大同小异</p></blockquote><p>api 目录下 sys.ts 示栗：</p><div class="tip custom-block"><p class="custom-block-title">📌 接口定义</p><ul><li>带上接口请求函数描述</li><li>method 大写，默认 GET 不用写入</li><li>入参使用对象简写方式</li></ul></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/axios/request&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@description</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">: 登录接口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> login</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/sys/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@description</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">: 获取用户信息接口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUserInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/sys/profile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>components 目录下 C_Table.vue 示栗：</p><div class="tip custom-block"><p class="custom-block-title">📌 头部注释</p><ul><li>根据配置的插件自动生成</li><li>手动快捷键 <code>Ctrl + Window + I</code></li><li>自动记录最新更改时间，最后编辑成员名称</li><li>更多使用和配置参考 <a href="https://github.com/OBKoro1/koro1FileHeader/wiki/%E5%AE%89%E8%A3%85%E5%92%8C%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B" target="_blank" rel="noreferrer">koroFileHeader</a></li></ul></div><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @Author: 杨晨誉</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @Date: 2022-03-23 14:53:17</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @LastEditors: ChenYu</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @LastEditTime: 2022-05-05 16:25:54</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @FilePath: \\v3-el-components\\src\\components\\C_Table\\index.vue</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @Description: 表格组件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/template /script setup /style ...</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">📌 template 示栗</p><ul><li>通过 TODO Highlight 插件进行关键信息高亮注释，参考 <a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight" target="_blank" rel="noreferrer">TODO Highlight</a></li><li>键入<span style="color:gold;"><strong>TODO:</strong></span> 或 <span style="color:#f06292;"><strong>FIXME:</strong></span> 进行关键的注释提示和注释警告</li><li>全局组件封装过程中，服务于全局组局的局部组件，参考 RenderSlot 组件命名方式 <code>AaBb</code></li></ul></div>`,9)),l(n,{src:"img/C_Table.png",title:"components, C_Table"}),i[6]||(i[6]=t('<div class="tip custom-block"><p class="custom-block-title">📌 script setup 示栗</p><ul><li>全局组件名以 <code>C_</code> 为前缀，组件首字母大写，比如 <code>C_Table</code>，驼峰规则</li><li>全局组件的类型约束建议单独剥离文件 <code>./types</code> 中进行定义</li><li>.vue 文件中 <code>props</code> 类型单独定义，抽至外部文件会导致异常报错</li><li>.vue 文件中 处理 <code>props</code> 有默认值使用 <code>withDefaults</code> 否则直接使用 <code>defineProps</code></li><li>.vue 文件中 <code>emits</code> 定义传递的方法 <code>e_</code> 为前缀，驼峰规则</li><li>UI 框架 API 方法，以 <code>handle</code> 前缀开头，驼峰规则</li></ul></div>',1)),l(n,{src:"img/C_Table-detail.png",title:"components, C_Table-detail"}),l(n,{src:"img/computed.png",title:"components, C_Table-computed"}),i[7]||(i[7]=s("p",null,"constant 目录下：",-1)),i[8]||(i[8]=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"📌 index.ts 示栗"),s("ul",null,[s("li",null,"服务于全局的常量，维护在这里"),s("li",null,"常量全部大写，以下划线隔开"),s("li",null,[a("全局常量导出使用 "),s("code",null,"export"),a(" 按需导出方式")])])],-1)),l(n,{src:"img/const.png",title:"const"}),i[9]||(i[9]=s("p",null,"hooks 目录下：",-1)),i[10]||(i[10]=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"📌 useCopy / index.ts 示栗"),s("p",null,[a("注意函数注释规范，选中函数名字，快捷键 "),s("code",null,"Ctrl + Win + T")])],-1)),l(n,{src:"img/useCopy.png",title:"useCopy"}),i[11]||(i[11]=t('<p>router 目录下：</p><div class="tip custom-block"><p class="custom-block-title">📌 demo / index.ts 示栗</p><ul><li>router 跟 views 命名规则一致</li><li>都是以文件夹形式，命名中划线隔开</li><li>路由信息 <code>path</code>，<code>name</code>，<code>component</code> 中值名称需一致</li></ul></div>',2)),l(n,{src:"img/router.png",title:"router-demo"}),i[12]||(i[12]=s("p",null,"store 目录下：",-1)),i[13]||(i[13]=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"📌 app / index.ts 示栗"),s("ul",null,[s("li",null,[a("定义 store 以 "),s("code",null,"s_"),a(" 前缀开头，驼峰命名规则")]),s("li",null,"唯一 id 如 'app'， 单词较长以中划线分割")])],-1)),l(n,{src:"img/store.png",title:"store，app"}),i[14]||(i[14]=s("p",null,"styles 目录下：",-1)),i[15]||(i[15]=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"📌 index.scss 示栗"),s("ul",null,[s("li",null,[a("Scss 使用，参考 "),s("a",{href:"https://www.sass.hk/",target:"_blank",rel:"noreferrer"},"Sass"),a(" 官方文档")]),s("li",null,"其他参考上面介绍的关于 CSS,SCSS 命名规则即可")])],-1)),l(n,{src:"img/styles.png",title:"styles"}),i[16]||(i[16]=t('<p>utils 目录下：</p><div class="tip custom-block"><p class="custom-block-title">📌 index.ts | d*tools.ts 示栗</p><ul><li>处理函数文件命名以 <code>d_</code> 前缀开头，驼峰规则</li><li>验证函数文件命名以 <code>v_</code> 前缀开头，驼峰规则</li><li>文件内部函数跟随文件命名规则，以 <code>d_</code> 或 <code>v_</code> 前缀</li><li>文件内部函数必须生成函数注释，清晰描述</li><li>无需导出服务于内部的私有函数，以 <code>_</code> 前缀，驼峰规则</li><li>导出方式使用 <code>export</code> 按需导出</li></ul></div>',2)),l(n,{src:"img/utils.png",title:"utils"}),l(n,{src:"img/d_tools.png",title:"d_tools"}),i[17]||(i[17]=t('<p>views 目录下：</p><div class="tip custom-block"><p class="custom-block-title">📌 table / index.vue 示栗</p><ul><li>文件夹命名使用小写中划线，内部文件命名同理</li><li>.vue 文件中编写组件实例</li><li>.scss 文件用来剥离对应 .vue 文件的样式处理</li><li>.types 文件用来剥离对应 .vue 文件的类型约束</li><li>data.ts 处理静态数据，无需动态变动的数据，以全大写常量定义传递</li><li>data.tsx 处理需要交互和操作虚拟 DOM 的数据源</li><li>传递组件的数据不需修改，建议使用常量传递</li><li>监听子组件传递的方法建议同名，方便区分，<code>e_</code> 前缀，驼峰规则</li><li><code>import</code> 引入顺序按照第三方 &gt; 内部 &gt; 常量名 &gt; 变量名的顺序</li><li>尽量使用 <code>ref</code> 代替 <code>reacitve</code> 处理响应式数据，性能更优</li><li>异步方法使用 <code>async await</code>，不建议在 setup 头部使用 async</li></ul><p>🔔 <strong>已做集成配置，在 .vue 中，无需引入 Vue 的 API、全局和 UI 组件、VueRouter、Pinia 可直接使用</strong></p></div>',2)),l(n,{src:"img/views-table.png",title:"views-table"}),i[18]||(i[18]=s("p",null,"其他规则在使用中，结合实践集思广益，陆续定义完善......",-1))])}const D=p(g,[["render",E]]);export{A as __pageData,D as default};
