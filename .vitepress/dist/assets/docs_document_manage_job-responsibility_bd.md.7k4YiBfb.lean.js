import{_ as n,I as s,c as b,o as _,af as t,J as e,j as l,w as d,a as o}from"./chunks/framework.hRqtpD5c.js";const f=JSON.parse('{"title":"RD：后端工程师( Back End Engineer)","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/document/manage/job-responsibility/bd.md","filePath":"docs/document/manage/job-responsibility/bd.md"}'),h={name:"docs/document/manage/job-responsibility/bd.md"};function p(k,a,u,T,m,c){const r=s("FontColor"),i=s("ElCard");return _(),b("div",null,[a[46]||(a[46]=t("",6)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[0]||(a[0]=o(" 💡",-1)),a[1]||(a[1]=l("p",null,"通过参与需求研讨，后端开发能够深入了解业务需求，为后续的系统设计和开发明确方向，确保技术方案与业务目标紧密结合，同时也能提前发现潜在的技术难点和风险点，为项目的顺利推进做好应对准备。",-1))]),_:1,__:[0,1]}),a[47]||(a[47]=t("",5)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[2]||(a[2]=o(" 💡",-1)),a[3]||(a[3]=l("p",null,"业务流程和逻辑关系的严谨性，对于后端来说，是后续工作开展的核心条件，后端开发必须要求和验证，准确掌握每个功能点的细节，才能有效的输出。只有对业务需求有清晰的理解，开发过程中才能避免反复和沟通成本，构建清晰的健壮数据关系。",-1))]),_:1,__:[2,3]}),a[48]||(a[48]=t("",8)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[4]||(a[4]=o(" 💡",-1)),a[5]||(a[5]=l("p",null,"合理的架构规划和技术选型决定了系统的可扩展性、稳定性、性能以及开发效率。后端开发需要认真对待，不是闷者头就一顿千行流，而是应该根据项目实际情况做出最佳配置，为后续的开发工作打下前置有效的基础准备。",-1))]),_:1,__:[4,5]}),a[49]||(a[49]=t("",5)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[6]||(a[6]=o(" 💡",-1)),a[7]||(a[7]=l("p",null,"良好的模块设计和接口定义能够提高系统的可维护性和可扩展性。每个模块都应该具有明确的功能职责，模块之间通过清晰的接口进行通信，这样可以降低模块之间的耦合度，使得系统更容易理解和维护。同时，合理的接口设计也方便与前端和其他系统进行集成。",-1))]),_:1,__:[6,7]}),a[50]||(a[50]=t("",5)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[8]||(a[8]=o(" 💡",-1)),a[9]||(a[9]=l("p",null,"数据库是后端系统的核心组成部分，合理的数据库设计直接影响系统的性能和数据管理能力。后端开发需要深入理解业务数据的关系和特点，设计出结构合理、高效可靠的数据库表结构，确保数据的正确存储和快速检索，为系统的稳定运行提供有力支持；比如数据库模式、数据字典、ER 关系图、数据流图、设置 SQL 脚本等等。",-1))]),_:1,__:[8,9]}),a[51]||(a[51]=t("",8)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[10]||(a[10]=o(" 💡",-1)),a[11]||(a[11]=l("p",null,"业务逻辑的正确实现是后端开发的核心前提。后端开发要将业务需求转化为具体的代码实现，就要清晰的处理各种业务规则和流程，确保系统能够按照预期的方式运行。高质量的代码实现能够提高系统的稳定性和可靠性，减少潜在的错误和漏洞，尤其是返工和重构，以及脏补丁。",-1))]),_:1,__:[10,11]}),a[52]||(a[52]=t("",5)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[12]||(a[12]=o(" 💡",-1)),a[13]||(a[13]=l("p",null,"接口是后端系统与外部交互的核心，其质量直接影响系统的集成效果和用户体验。后端开发需要按照规范开发安全、可靠、高效的接口，满足不同系统和客户的需求，实现前后端以及不同系统之间的数据交互和业务协同；验证点包含数据结构，状态信息，异常处理，日志记录，消息传递，HTTP 响应等。",-1))]),_:1,__:[12,13]}),a[53]||(a[53]=t("",5)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[14]||(a[14]=o(" 💡",-1)),a[15]||(a[15]=l("p",null,[o("高质量的代码是永远的刚需，同典型标杆看齐，大家向"),l("code",null,"马钧"),o("同学学习。良好的代码规范和注释能够提高代码的可读性和可维护性，便于团队成员之间的协作和代码的后续维护。单元测试虽然有挑战，但能够有效发现代码中的问题，降低系统出现故障的风险，提高软件的质量和可靠性。")],-1))]),_:1,__:[14,15]}),a[54]||(a[54]=t("",8)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[16]||(a[16]=o(" 💡",-1)),a[17]||(a[17]=l("p",null,"及时了解系统的性能状况是进行性能优化的前提。通过性能分析工具去发现系统的性能瓶颈和潜在问题。后端开发需要掌握这些工具的使用方法，尤其是技术负责人，定期对系统进行性能监测，确保系统在不同负载情况下都能稳定运行。",-1))]),_:1,__:[16,17]}),a[55]||(a[55]=t("",5)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[18]||(a[18]=o(" 💡",-1)),a[19]||(a[19]=l("p",null,"代码优化是必然的，优质的代码都是优化出来的。后端开发需要不断优化代码，提高代码的可读性和健壮性。通过对关键代码段的优化，对系统的性能，响应时间也是好事儿，对协同伙伴来说也是一种精致体验，不然觉得我又菜又不爱玩，硬编硬怼。",-1))]),_:1,__:[18,19]}),a[56]||(a[56]=t("",5)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[20]||(a[20]=o(" 💡",-1)),a[21]||(a[21]=l("p",null,"数据库是后端系统的重要支撑，其性能直接影响整个系统的运行效率。后端开发需要掌握数据库优化技术，通过对数据库的合理配置和优化，确保数据的快速存储和检索，提高系统的整体性能和响应速度，并提供精简有效的数据。",-1))]),_:1,__:[20,21]}),a[57]||(a[57]=t("",8)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[22]||(a[22]=o(" 💡",-1)),a[23]||(a[23]=l("p",null,"安全是核心的保障，任何安全漏洞都可能导致严重的后果，甚至产生事故。后端开发需要具备安全意识，了解常见的安全攻击方式和防范措施，在代码编写中采取相应的手段来防止安全漏洞的出现，防护系统漏洞和用户数据的问题。",-1))]),_:1,__:[22,23]}),a[58]||(a[58]=l("br",null,null,-1)),a[59]||(a[59]=l("h4",{id:"_2-权限管理与访问控制",tabindex:"-1"},[o("2. 权限管理与访问控制 "),l("a",{class:"header-anchor",href:"#_2-权限管理与访问控制","aria-label":"Permalink to “2. 权限管理与访问控制”"},"​")],-1)),a[60]||(a[60]=l("div",{class:"warning custom-block"},[l("p",{class:"custom-block-title"},"场景：👀"),l("p",null,"设计和实现系统的权限管理和访问控制机制，这基础的做透了的东西，就不赘述了。")],-1)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[24]||(a[24]=o(" 💡",-1)),a[25]||(a[25]=l("p",null,"后端开发需要根据系统的业务需求，设计完善的权限模型，并在代码中实现严格的权限控制逻辑，防止未经授权的访问和操作，保障业务及数据安全，不再细述，一笔带过，这些虽然是核心，但也是最基础的。",-1))]),_:1,__:[24,25]}),a[61]||(a[61]=t("",8)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[26]||(a[26]=o(" 💡",-1)),a[27]||(a[27]=l("p",null,"对于我们的行业和业务场景来看，系统集成是我们项目交付，信息化建设中的常见需求，后端开发需要具备良好的沟通和协调能力，与其他系统的开发团队合作，实现不同系统之间的数据共享和业务协同。能梳理好它们的对接集成关系和业务数据传递优先级，并通过优秀的沟通协同把控能力，规避业务数据闭环风险，执行落地，才是重中之重和能力的体现。",-1))]),_:1,__:[26,27]}),a[62]||(a[62]=t("",7)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[28]||(a[28]=o(" 💡",-1)),a[29]||(a[29]=l("p",null,"充分自测联测是最起码的专业素养。时间的因素，单元测试可选。但集成测试质量必须充分保证。后端开发需要积极参与测试工作，及时修复测试中发现的问题，确保系统的质量符合要求避免反复，也减轻测试伙伴的负担。",-1))]),_:1,__:[28,29]}),a[63]||(a[63]=t("",7)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[30]||(a[30]=o(" 💡",-1)),a[31]||(a[31]=l("p",null,"开发不可避免会遇到各种问题。后端伙伴需要具备较强的问题规避、排查和解决能力，能够迅速定位问题并采取有效的措施进行修复，避免头疼医头，脚疼医脚。",-1))]),_:1,__:[30,31]}),a[64]||(a[64]=t("",8)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[32]||(a[32]=o(" 💡",-1)),a[33]||(a[33]=l("p",null,"项目上线的跟踪维护是保障系统稳定必须的重要工作，也是为下一步能快速验收打好坚定基础。后端伙伴需要跟踪生产运行情况，确保服务和数据的正常运行，及时处理出现的问题。",-1))]),_:1,__:[32,33]}),a[65]||(a[65]=t("",5)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[34]||(a[34]=o(" 💡",-1)),a[35]||(a[35]=l("p",null,"为了让我们的运维伙伴，根据合同约定的质保运维服务，平滑快速的接手运维工作，一方面要保证项目代码的可维护性，质量健壮性，同时也要标准化的按交付将代码及相关文档移交运维伙伴，当运维伙伴出现无法解决的问题，紧急的快速处理，不紧急的集中处理和培训。",-1))]),_:1,__:[34,35]}),a[66]||(a[66]=t("",5)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[36]||(a[36]=o(" 💡",-1)),a[37]||(a[37]=l("p",null,"不应该无休止，无穷尽的 CURD，在开发建设系统过程中，基于业务的沉淀，技术配置、编码的复用，可能需要有意识的不断进行升级和优化。确保系统能够适应不断变化的环境和新的业务需求，是不是应该也有一些针对项目输出的可移植，复用的业务侧或技术侧的代码模块、库。",-1))]),_:1,__:[36,37]}),a[67]||(a[67]=t("",10)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[38]||(a[38]=o(" 💡",-1)),a[39]||(a[39]=l("p",null,"那么作为组长，你要做人才识别，做一下小组的人盘盘点，你要有盘点的思路和章程，你对专业小组管理的理解，对同属性伙伴专业输出的识别，有一套方法论，基于这个方法论，针对动态的业务场景和公司战略需要，有人才分类匹配的依据，并且针对态度能力的融合，可以针对性的输出管理办法和考核标准，让大家知道需要把做的事儿，如何职业化的去做到什么程度，并把它的价值和能效体现起来，激活人才，凝聚一体，如臂指使。",-1))]),_:1,__:[38,39]}),a[68]||(a[68]=t("",8)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[40]||(a[40]=o(" 💡",-1)),a[41]||(a[41]=l("p",null,"那么简单直白一点说，一线的管理动作是需要一些行为执行来拉通分工协同的，动作就是其中一个最直观的抓手；比如小组内部分享，识别擅长和偏好，优缺点，引导性和针对性的使成员共同成长；小组双周会，调动小组的集体力量和智慧解决点点滴聚焦的问题，以面破点，落地解决问题，体现赋能，也为后续的工作计划和人员调配有一个前置清晰的依据。",-1))]),_:1,__:[40,41]}),a[69]||(a[69]=t("",9)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[42]||(a[42]=o(" 💡",-1)),a[43]||(a[43]=l("p",null,"要做到人员的有效调动，第一，对成员能力和项目匹配度有认知和判定；第二，能识别项目计划制定专业计划，避免人员空闲稀释成本和能效；第三，把控项目上专业人员的风险，有补台补位及预防措施，并确定末尾红线替换淘汰机制（比如任务完成度和输出要做到什么程度）若因为组人员调配，影响到项目组工作计划造成时间冲突的，需跟项目负责人和项目计划达成一致（计划识别和同步），有分歧上报部门调整优先级（尽量避免）。",-1))]),_:1,__:[42,43]}),a[70]||(a[70]=t("",7)),e(i,{shadow:"hover"},{default:d(()=>[e(r,{text:"解释"}),a[44]||(a[44]=o(" 💡",-1)),a[45]||(a[45]=l("p",null,"回归职场，职业发展的路径，公司团队发展的需要，内建都是核心，练武不练功，到头一场空，培养和晋升是相辅相成的，通俗直白一点说，你要晋升，就培养出来一个人来可以替代你现有，要把价值显性化，实例化，具象化，这才是管理的价值，赋能使能。",-1))]),_:1,__:[44,45]}),a[71]||(a[71]=l("p",null,"小组成员能力培养，要定指标，定要求，有培养计划和课题，结果可验证，如业务域，演讲能力，方案能力，需求管理能力等等，用输出沉淀和结果说话（也会作为晋升依据）；专业管理人员，需跟成员明确梯队匹配分级，未来我们配合人力资源把人员职级细化，明确晋升路径。",-1)),a[72]||(a[72]=l("h2",{id:"core",tabindex:"-1"},[o("Core "),l("a",{class:"header-anchor",href:"#core","aria-label":"Permalink to “Core”"},"​")],-1)),a[73]||(a[73]=l("div",{class:"tip custom-block"},[l("p",{class:"custom-block-title custom-block-title-default"},"TIP"),l("p",null,"对于一个合格且优秀的组长，一定要是制度流程的坚定拥护者和执行者，上传下达，上行下效，尽力尽心尽责的做好职能管理，树立好的标杆典型，杜绝劣币淘汰良币的情况发生，所以在这个过程中，就要做好检查，有效监督，积极纠偏，努力去做提升。把事、人、情分开来看。我们的组长，不但要对项目的输入输出有哪些洞若观火，还应该对输入输出到什么程度了如指掌，再好的制度、流程、规范，没有检查监督，纠偏和优化，最后就会不了了之流于形式。管理角色需要提升自己的认知，打败自己心理的矫情和软弱，规避本位主义的趋利避害，才是迈向管理角色坚实的一步，应该用更健康的心态去看待和开展管理工作，最终的目的，都是为了精益赋能，降低沟通和试错成本，而不是为管理而管理。")],-1))])}const x=n(h,[["render",p]]);export{f as __pageData,x as default};
